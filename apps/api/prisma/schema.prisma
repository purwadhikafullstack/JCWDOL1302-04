// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  name       String    @db.VarChar(255)
  email      String    @unique @db.VarChar(100)
  password   String?   @db.VarChar(100)
  provider   String?   @db.VarChar(50)
  image      String?   @db.VarChar(100)
  role       String    @db.VarChar(50)
  isVerified Boolean
  birthdate  DateTime?
  gender     String?   @db.VarChar(1)
  createAt   DateTime  @default(now())
  updateAt   DateTime  @updatedAt

  properties Property[]
  oders      Order[]

  @@map("users")
}

model Property {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  description String   @db.Text
  image       String   @db.VarChar(100)
  location    String   @db.Text
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt

  userId             String           @map("user_id")
  user               User             @relation(fields: [userId], references: [id])
  propertyCategoryId Int              @map("property_category_id")
  propertyCategory   PropertyCategory @relation(fields: [propertyCategoryId], references: [id])
  rooms              Room[]

  @@map("properties")
}

model PropertyCategory {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  properties Property[]

  @@map("propertyCategories")
}

model Room {
  id          String   @id @default(uuid())
  type        String   @db.VarChar(255)
  description String   @db.Text
  image       String   @db.VarChar(100)
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt

  propertyId         String             @map("property_id")
  property           Property           @relation(fields: [propertyId], references: [id])
  roomPrices         RoomPrice?
  orderRooms         OrderRoom[]
  roomAvailabilities RoomAvailability[]
  specialPrices      SpecialPrice[]

  @@map("rooms")
}

model RoomPrice {
  id    String   @id @default(uuid())
  date  DateTime @default(now())
  price Float

  roomId String @unique @map("room_id")
  room   Room   @relation(fields: [roomId], references: [id])

  @@map("roomPrices")
}

model Order {
  id           String   @id @default(uuid())
  expDateTime  DateTime
  status       String   @default("pending") @db.VarChar(100)
  totalPayment Float
  invoiceId    String   @db.VarChar(255)
  urlPayment   String   @db.VarChar(255)
  checkIn      DateTime
  checkOut     DateTime
  createAt     DateTime @default(now())
  updateAt     DateTime @updatedAt

  userId     String      @map("user_id")
  user       User        @relation(fields: [userId], references: [id])
  review     Review?
  orderRooms OrderRoom[]

  @@map("orders")
}

model Review {
  id       String   @id @default(uuid())
  point    Float
  comment  String   @db.Text
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  orderId String @unique @map("order_id")
  order   Order  @relation(fields: [orderId], references: [id])

  @@map("reviews")
}

model OrderRoom {
  id String @id @default(uuid())

  orderId  String @map("order_id")
  order    Order  @relation(fields: [orderId], references: [id])
  roomId   String @map("room_id")
  room     Room   @relation(fields: [roomId], references: [id])
  quantity Int
  price    Float

  @@map("orderRooms")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@map("verificationTokens")
}

model RoomAvailability {
  id       String   @id @default(uuid())
  fromDate DateTime
  toDate   DateTime

  roomId String @map("room_id")
  room   Room   @relation(fields: [roomId], references: [id])

  @@map("roomAvailabilities")
}

model SpecialPrice {
  id       String    @id @default(uuid())
  price    Float
  fromDate DateTime
  toDate   DateTime?

  roomId String @map("room_id")
  room   Room   @relation(fields: [roomId], references: [id])

  @@map("specialPrices")
}
